// Mocks generated by Mockito 5.4.4 from annotations
// in chatwoot_sdk/test/chatwoot_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:chatwoot_sdk/chatwoot_callbacks.dart' as _i4;
import 'package:chatwoot_sdk/data/chatwoot_repository.dart' as _i6;
import 'package:chatwoot_sdk/data/local/entity/chatwoot_user.dart' as _i8;
import 'package:chatwoot_sdk/data/local/local_storage.dart' as _i3;
import 'package:chatwoot_sdk/data/remote/requests/chatwoot_action_data.dart'
    as _i10;
import 'package:chatwoot_sdk/data/remote/requests/chatwoot_new_message_request.dart'
    as _i9;
import 'package:chatwoot_sdk/data/remote/service/chatwoot_client_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:riverpod/src/internals.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChatwootClientService_0 extends _i1.SmartFake
    implements _i2.ChatwootClientService {
  _FakeChatwootClientService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalStorage_1 extends _i1.SmartFake implements _i3.LocalStorage {
  _FakeLocalStorage_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChatwootCallbacks_2 extends _i1.SmartFake
    implements _i4.ChatwootCallbacks {
  _FakeChatwootCallbacks_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderScheduler_3 extends _i1.SmartFake
    implements _i5.ProviderScheduler {
  _FakeProviderScheduler_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderSubscription_4<State1> extends _i1.SmartFake
    implements _i5.ProviderSubscription<State1> {
  _FakeProviderSubscription_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderElementBase_5<StateT> extends _i1.SmartFake
    implements _i5.ProviderElementBase<StateT> {
  _FakeProviderElementBase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatwootRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatwootRepository extends _i1.Mock
    implements _i6.ChatwootRepository {
  MockChatwootRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatwootClientService get clientService => (super.noSuchMethod(
        Invocation.getter(#clientService),
        returnValue: _FakeChatwootClientService_0(
          this,
          Invocation.getter(#clientService),
        ),
      ) as _i2.ChatwootClientService);

  @override
  _i3.LocalStorage get localStorage => (super.noSuchMethod(
        Invocation.getter(#localStorage),
        returnValue: _FakeLocalStorage_1(
          this,
          Invocation.getter(#localStorage),
        ),
      ) as _i3.LocalStorage);

  @override
  _i4.ChatwootCallbacks get callbacks => (super.noSuchMethod(
        Invocation.getter(#callbacks),
        returnValue: _FakeChatwootCallbacks_2(
          this,
          Invocation.getter(#callbacks),
        ),
      ) as _i4.ChatwootCallbacks);

  @override
  set callbacks(_i4.ChatwootCallbacks? _callbacks) => super.noSuchMethod(
        Invocation.setter(
          #callbacks,
          _callbacks,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> initialize(_i8.ChatwootUser? user) => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [user],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void getPersistedMessages() => super.noSuchMethod(
        Invocation.method(
          #getPersistedMessages,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> getMessages() => (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void listenForEvents() => super.noSuchMethod(
        Invocation.method(
          #listenForEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> sendMessage(_i9.ChatwootNewMessageRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [request],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void sendAction(_i10.ChatwootActionType? action) => super.noSuchMethod(
        Invocation.method(
          #sendAction,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ProviderContainer].
///
/// See the documentation for Mockito's code generation for more information.
class MockProviderContainer extends _i1.Mock implements _i5.ProviderContainer {
  MockProviderContainer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set vsyncOverride(void Function(void Function())? _vsyncOverride) =>
      super.noSuchMethod(
        Invocation.setter(
          #vsyncOverride,
          _vsyncOverride,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ProviderScheduler get scheduler => (super.noSuchMethod(
        Invocation.getter(#scheduler),
        returnValue: _FakeProviderScheduler_3(
          this,
          Invocation.getter(#scheduler),
        ),
      ) as _i5.ProviderScheduler);

  @override
  int get depth => (super.noSuchMethod(
        Invocation.getter(#depth),
        returnValue: 0,
      ) as int);

  @override
  List<_i5.ProviderObserver> get observers => (super.noSuchMethod(
        Invocation.getter(#observers),
        returnValue: <_i5.ProviderObserver>[],
      ) as List<_i5.ProviderObserver>);

  @override
  set debugCanModifyProviders(void Function()? _debugCanModifyProviders) =>
      super.noSuchMethod(
        Invocation.setter(
          #debugCanModifyProviders,
          _debugCanModifyProviders,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void Function(void Function()) get vsync => (super.noSuchMethod(
        Invocation.getter(#vsync),
        returnValue: (void Function() task) {},
      ) as void Function(void Function()));

  @override
  List<_i5.ProviderContainer> get debugChildren => (super.noSuchMethod(
        Invocation.getter(#debugChildren),
        returnValue: <_i5.ProviderContainer>[],
      ) as List<_i5.ProviderContainer>);

  @override
  bool hasStateReaderFor(_i5.ProviderListenable<Object?>? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasStateReaderFor,
          [provider],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> pump() => (super.noSuchMethod(
        Invocation.method(
          #pump,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  Result read<Result>(_i5.ProviderListenable<Result>? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [provider],
        ),
        returnValue: _i11.dummyValue<Result>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
      ) as Result);

  @override
  bool exists(_i5.ProviderBase<Object?>? provider) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [provider],
        ),
        returnValue: false,
      ) as bool);

  @override
  void debugReassemble() => super.noSuchMethod(
        Invocation.method(
          #debugReassemble,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ProviderSubscription<State> listen<State>(
    _i5.ProviderListenable<State>? provider,
    void Function(
      State?,
      State,
    )? listener, {
    bool? fireImmediately = false,
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [
            provider,
            listener,
          ],
          {
            #fireImmediately: fireImmediately,
            #onError: onError,
          },
        ),
        returnValue: _FakeProviderSubscription_4<State>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #fireImmediately: fireImmediately,
              #onError: onError,
            },
          ),
        ),
      ) as _i5.ProviderSubscription<State>);

  @override
  void invalidate(_i5.ProviderOrFamily? provider) => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [provider],
        ),
        returnValueForMissingStub: null,
      );

  @override
  State refresh<State>(_i5.Refreshable<State>? provider) => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [provider],
        ),
        returnValue: _i11.dummyValue<State>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
      ) as State);

  @override
  void updateOverrides(List<_i5.Override>? overrides) => super.noSuchMethod(
        Invocation.method(
          #updateOverrides,
          [overrides],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ProviderElementBase<State> readProviderElement<State>(
          _i5.ProviderBase<State>? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #readProviderElement,
          [provider],
        ),
        returnValue: _FakeProviderElementBase_5<State>(
          this,
          Invocation.method(
            #readProviderElement,
            [provider],
          ),
        ),
      ) as _i5.ProviderElementBase<State>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<_i5.ProviderElementBase<dynamic>> getAllProviderElements() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProviderElements,
          [],
        ),
        returnValue: <_i5.ProviderElementBase<dynamic>>[],
      ) as Iterable<_i5.ProviderElementBase<dynamic>>);

  @override
  Iterable<_i5.ProviderElementBase<dynamic>> getAllProviderElementsInOrder() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProviderElementsInOrder,
          [],
        ),
        returnValue: <_i5.ProviderElementBase<dynamic>>[],
      ) as Iterable<_i5.ProviderElementBase<dynamic>>);
}
