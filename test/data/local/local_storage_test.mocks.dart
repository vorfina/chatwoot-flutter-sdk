// Mocks generated by Mockito 5.4.4 from annotations
// in chatwoot_sdk/test/data/local/local_storage_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:chatwoot_sdk/data/local/dao/chatwoot_contact_dao.dart' as _i5;
import 'package:chatwoot_sdk/data/local/dao/chatwoot_conversation_dao.dart'
    as _i2;
import 'package:chatwoot_sdk/data/local/dao/chatwoot_messages_dao.dart' as _i7;
import 'package:chatwoot_sdk/data/local/dao/chatwoot_user_dao.dart' as _i9;
import 'package:chatwoot_sdk/data/local/entity/chatwoot_contact.dart' as _i6;
import 'package:chatwoot_sdk/data/local/entity/chatwoot_conversation.dart'
    as _i4;
import 'package:chatwoot_sdk/data/local/entity/chatwoot_message.dart' as _i8;
import 'package:chatwoot_sdk/data/local/entity/chatwoot_user.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ChatwootConversationDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatwootConversationDao extends _i1.Mock
    implements _i2.ChatwootConversationDao {
  MockChatwootConversationDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveConversation(_i4.ChatwootConversation? conversation) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveConversation,
          [conversation],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteConversation() => (super.noSuchMethod(
        Invocation.method(
          #deleteConversation,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> onDispose() => (super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ChatwootContactDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatwootContactDao extends _i1.Mock
    implements _i5.ChatwootContactDao {
  MockChatwootContactDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveContact(_i6.ChatwootContact? contact) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveContact,
          [contact],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteContact() => (super.noSuchMethod(
        Invocation.method(
          #deleteContact,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> onDispose() => (super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ChatwootMessagesDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatwootMessagesDao extends _i1.Mock
    implements _i7.ChatwootMessagesDao {
  MockChatwootMessagesDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveMessage(_i8.ChatwootMessage? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMessage,
          [message],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveAllMessages(List<_i8.ChatwootMessage>? messages) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAllMessages,
          [messages],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i8.ChatwootMessage? getMessage(int? messageId) =>
      (super.noSuchMethod(Invocation.method(
        #getMessage,
        [messageId],
      )) as _i8.ChatwootMessage?);

  @override
  List<_i8.ChatwootMessage> getMessages() => (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [],
        ),
        returnValue: <_i8.ChatwootMessage>[],
      ) as List<_i8.ChatwootMessage>);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMessage(int? messageId) => (super.noSuchMethod(
        Invocation.method(
          #deleteMessage,
          [messageId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> onDispose() => (super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [PersistedChatwootConversationDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistedChatwootConversationDao extends _i1.Mock
    implements _i2.PersistedChatwootConversationDao {
  MockPersistedChatwootConversationDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> deleteConversation() => (super.noSuchMethod(
        Invocation.method(
          #deleteConversation,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveConversation(_i4.ChatwootConversation? conversation) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveConversation,
          [conversation],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> onDispose() => (super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [PersistedChatwootContactDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistedChatwootContactDao extends _i1.Mock
    implements _i5.PersistedChatwootContactDao {
  MockPersistedChatwootContactDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> deleteContact() => (super.noSuchMethod(
        Invocation.method(
          #deleteContact,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveContact(_i6.ChatwootContact? contact) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveContact,
          [contact],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> onDispose() => (super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [PersistedChatwootMessagesDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistedChatwootMessagesDao extends _i1.Mock
    implements _i7.PersistedChatwootMessagesDao {
  MockPersistedChatwootMessagesDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveMessage(_i8.ChatwootMessage? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMessage,
          [message],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveAllMessages(List<_i8.ChatwootMessage>? messages) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAllMessages,
          [messages],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<_i8.ChatwootMessage> getMessages() => (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [],
        ),
        returnValue: <_i8.ChatwootMessage>[],
      ) as List<_i8.ChatwootMessage>);

  @override
  _i3.Future<void> onDispose() => (super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMessage(int? messageId) => (super.noSuchMethod(
        Invocation.method(
          #deleteMessage,
          [messageId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i8.ChatwootMessage? getMessage(int? messageId) =>
      (super.noSuchMethod(Invocation.method(
        #getMessage,
        [messageId],
      )) as _i8.ChatwootMessage?);

  @override
  _i3.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ChatwootUserDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatwootUserDao extends _i1.Mock implements _i9.ChatwootUserDao {
  MockChatwootUserDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveUser(_i10.ChatwootUser? user) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [user],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteUser() => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> onDispose() => (super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [PersistedChatwootUserDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistedChatwootUserDao extends _i1.Mock
    implements _i9.PersistedChatwootUserDao {
  MockPersistedChatwootUserDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> deleteUser() => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveUser(_i10.ChatwootUser? user) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [user],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> onDispose() => (super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
